plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.jetbrains.kotlin.jvm'
}

group 'com.mcreater'
version '0.1'

sourceCompatibility = "1.9"
targetCompatibility = "1.9"

application {
    mainClass = 'com.mcreater.fluentdemo.Main'
    applicationDefaultJvmArgs = ["-XX:+UseZGC", "--add-opens", "java.base/java.lang=ALL-UNNAMED", "-Xmx320M"]
}

repositories {
    mavenCentral()
    maven { url = "https://maven.aliyun.com/repository/public" }
    maven { url = "https://maven.aliyun.com/repository/jcenter" }
    maven { url = "https://maven.aliyun.com/repository/google" }
    maven { url = "https://maven.aliyun.com/repository/central" }
    maven { url 'https://mvnrepository.com/artifact/' }
    maven { url 'https://jitpack.io/' }
}

javafx {
    if (getJavaVersion() > 10) {
        version = '19.0.2.1'
        modules = ['javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.web', 'javafx.swing']
    }
}

static int getJavaVersion() {
    int version = 0
    String[] ful = System.getProperty("java.runtime.version").split("\\.");
    if (Integer.parseInt(ful[0]) == 1) {
        version = Integer.parseInt(ful[1]);
    } else {
        version = Integer.parseInt(ful[0]);
    }
    return version
}

dependencies {
    implementation project(path: ':fluentcore')
    implementation "io.github.palexdev:materialfx:11.13.5"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    if (getJavaVersion() > 10) {
        implementation project(path: ":fluentcorej9")
    }
    implementation "net.java.dev.jna:jna:5.7.0"
    implementation "net.java.dev.jna:jna-platform:5.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = "com.mcreater.fluentdemo.MainKt"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        title "Javadoc root"
    }
}

publishing {
    publications {
        fluentdemo(MavenPublication) {
            groupId group
            artifactId name
            version version

            artifact sourcesJar
            artifact jar
//            artifact javadocJar

            pom.withXml {
                Node root = asNode().appendNode("dependencies", new HashMap())
                this.configurations.implementation.dependencies.forEach {
                    if (it.group != "org.openjfx" && it.name != "unspecified") {
                        Node dependencyNode = root.appendNode("dependency")
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        maven { url uri(new File(rootProject.projectDir.getAbsolutePath(), "maven").getAbsolutePath()) }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}