import java.nio.file.Files

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

group 'com.mcreater'
version '1.0-SNAPSHOT'

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = "8"
targetCompatibility = "8"

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}
tasks.withType(Javadoc) {
    options.encoding = "utf-8"
}

javafx {
    if (getJavaVersion() > 10) {
        version = '19.0.2.1'
        modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
    }
}

repositories {
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://mvnrepository.com/artifact/' }
    maven { url 'https://jitpack.io/' }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

if (checkPlatform(System.WINDOWS, Arch.X86_64)) {
    tasks.register('nativeCopy_win32_x86_64') {
        checkPlatform(System.WINDOWS, Arch.X86_64)
        java.nio.file.Path targetDll = project.file("fluentcore/src/main/resources/win32-x86-64/UiShell.dll").toPath()
        it.doFirst {
            Files.delete(targetDll)
        }
        it.doLast {
            Files.copy(project.file("uishell/win/UiShell.dll").toPath(), targetDll)
        }
    }

    tasks.register('nativeBuild_win32_x86_64') {
        it.doFirst {
            project.exec {
                workingDir project.file("uishell/win")
                def myCommond = [
                        "cmd", "/c", "build.bat"
                ]
                commandLine myCommond
            }
        }
        it.finalizedBy(tasks.nativeCopy_win32_x86_64)
    }
}

allprojects {
    if (project.name == "fluentcore") {
        tasks.configureEach {
            if (it.getName() == "compileJava") {
                if (checkPlatform(System.WINDOWS, Arch.X86_64)) it.dependsOn(rootProject.tasks.nativeBuild_win32_x86_64)
            }
        }
    }
}

static boolean checkPlatform(System system, Arch arch) {
    return getSystem() == system && getArch() == arch
}

enum System {
    WINDOWS, MACOS, LINUX
}

enum Arch {
    X86,
    X86_64,
    IA32,
    IA64,
    SPARC,
    SPARCV9,
    ARM32,
    ARM64,
    MIPS,
    MIPS64,
    MIPSEL,
    MIPS64EL,
    PPC,
    PPC64,
    PPCLE,
    PPC64LE,
    S390,
    S390X,
    RISCV32,
    RISCV64,
    LOONGARCH32,
    LOONGARCH64_OW,
    LOONGARCH64,
    UNKNOWN
}

static System getSystem() {
    if (java.lang.System.getProperty("os.name").toLowerCase().contains("windows")) return System.WINDOWS;
    if (java.lang.System.getProperty("os.name").toLowerCase().contains("mac") || java.lang.System.getProperty("os.name").toLowerCase().contains("osx")) return System.MACOS
    if (java.lang.System.getProperty("os.name").toLowerCase().contains("linux")) return System.LINUX
    return System.WINDOWS
}

static Arch getArch() {
    String value = java.lang.System.getProperty("os.arch")
    switch (value) {
        case "x8664":
        case "x86-64":
        case "x86_64":
        case "amd64":
        case "ia32e":
        case "em64t":
        case "x64":
            return Arch.X86_64;
        case "x8632":
        case "x86-32":
        case "x86_32":
        case "x86":
        case "i86pc":
        case "i386":
        case "i486":
        case "i586":
        case "i686":
        case "ia32":
        case "x32":
            return Arch.X86;
        case "arm64":
        case "aarch64":
            return Arch.ARM64;
        case "arm":
        case "arm32":
            return Arch.ARM32;
        case "mips64":
            return Arch.MIPS64;
        case "mips64el":
            return Arch.MIPS64EL;
        case "mips":
        case "mips32":
            return Arch.MIPS;
        case "mipsel":
        case "mips32el":
            return Arch.MIPSEL;
        case "riscv":
        case "risc-v":
        case "riscv64":
            return Arch.RISCV64;
        case "ia64":
        case "ia64w":
        case "itanium64":
            return Arch.IA64;
        case "ia64n":
            return Arch.IA32;
        case "sparcv9":
        case "sparc64":
            return Arch.SPARCV9;
        case "sparc":
        case "sparc32":
            return Arch.SPARC;
        case "ppc64":
        case "powerpc64":
            return "little".equals(java.lang.System.getProperty("sun.cpu.endian")) ? Arch.PPC64LE : Arch.PPC64;
        case "ppc64le":
        case "powerpc64le":
            return Arch.PPC64LE;
        case "ppc":
        case "ppc32":
        case "powerpc":
        case "powerpc32":
            return Arch.PPC;
        case "ppcle":
        case "ppc32le":
        case "powerpcle":
        case "powerpc32le":
            return Arch.PPCLE;
        case "s390":
            return Arch.S390;
        case "s390x":
            return Arch.S390X;
        case "loongarch32":
            return Arch.LOONGARCH32;
        case "loongarch64": {
            String v = java.lang.System.getProperty("os.version")
            int first = Integer.parseInt(v.split("\\.")[0])
            int second = Integer.parseInt(v.split("\\.")[1])
            if (first < 5 || (first == 5 && second <= 19))
                return Arch.LOONGARCH64_OW;
            return Arch.LOONGARCH64;
        }
        default:
            if (value.startsWith("armv7")) {
                return Arch.ARM32;
            }
            if (value.startsWith("armv8") || value.startsWith("armv9")) {
                return Arch.ARM64;
            }
            return Arch.UNKNOWN;
    }
}

static int getJavaVersion() {
    int version = 0
    String[] ful = java.lang.System.getProperty("java.runtime.version").split("\\.")
    if (Integer.parseInt(ful[0]) == 1) {
        version = Integer.parseInt(ful[1])
    } else {
        version = Integer.parseInt(ful[0])
    }
    return version
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}